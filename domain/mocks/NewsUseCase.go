// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "socialmedia-app/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewsUseCase is an autogenerated mock type for the NewsUseCase type
type NewsUseCase struct {
	mock.Mock
}

// AddNews provides a mock function with given fields: IDUser, newNews
func (_m *NewsUseCase) AddNews(IDUser int, newNews domain.News) (domain.News, error) {
	ret := _m.Called(IDUser, newNews)

	var r0 domain.News
	if rf, ok := ret.Get(0).(func(int, domain.News) domain.News); ok {
		r0 = rf(IDUser, newNews)
	} else {
		r0 = ret.Get(0).(domain.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.News) error); ok {
		r1 = rf(IDUser, newNews)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelNews provides a mock function with given fields: IDNews
func (_m *NewsUseCase) DelNews(IDNews int) (bool, error) {
	ret := _m.Called(IDNews)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDNews)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDNews)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllN provides a mock function with given fields:
func (_m *NewsUseCase) GetAllN() ([]domain.News, error) {
	ret := _m.Called()

	var r0 []domain.News
	if rf, ok := ret.Get(0).(func() []domain.News); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyN provides a mock function with given fields: IDUser
func (_m *NewsUseCase) GetMyN(IDUser int) ([]domain.News, error) {
	ret := _m.Called(IDUser)

	var r0 []domain.News
	if rf, ok := ret.Get(0).(func(int) []domain.News); ok {
		r0 = rf(IDUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpNews provides a mock function with given fields: IDNews, updateData
func (_m *NewsUseCase) UpNews(IDNews int, updateData domain.News) (domain.News, error) {
	ret := _m.Called(IDNews, updateData)

	var r0 domain.News
	if rf, ok := ret.Get(0).(func(int, domain.News) domain.News); ok {
		r0 = rf(IDNews, updateData)
	} else {
		r0 = ret.Get(0).(domain.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.News) error); ok {
		r1 = rf(IDNews, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNewsUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewNewsUseCase creates a new instance of NewsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNewsUseCase(t mockConstructorTestingTNewNewsUseCase) *NewsUseCase {
	mock := &NewsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
