openapi: 3.0.3
info:
  title: Sosial Media
  description: Sosial Media APP with Golang and React JS
  contact:
    name: Group5
    email: sos@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0.0'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://app.swaggerhub.com/apis/GolangProject/SosialMedia/1.0.1
  - url: http://localhost:8000
    description: requestMethod
tags:
  - name: Auth
    description: Layanan untuk authentikasi user
  - name: Users
    description: Layanan yang mengorganisir data user
  - name: News
    description: Layanan yang mengorganisir data News
  - name: Comment
    description: Layanan yang mengorganisir Comment

paths:
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Login user bisa digunakan ketika user sudah registrasi
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                  email: "jungkook@gmail.com",
                  password: "jung123"
                }
              userData2:
                description: "Example data  user 2"
                value: {
                  username: "eunwoo@gmail.com",
                  password: "eun123"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseLoginSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
              
                    message: "Login Success",
                    data: {
                      "user_id": 1,
                      "user_name": "jungkook",
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
                responseData2:
                  description: response success 2
                  value: {
                    "message": "Login Success",
                    "data": {
                      user_id: 2,
                      user_name: "eunwoo",
                      token: "AyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    "code" : 400,
                    "message": "email or password incorrect",
                    "data": null
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    "code" : 400,
                    "message": "email or password incorrect",
                    "data": null
                  }
        '500':
          description: Internal server Error
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    "code" : 500,
                    "message": "Internal server Error",
                    "data": null
                  }
  /users:
    post:
      tags:
        - Users
      summary: Registration User
      description: Saat registrasi user harus input semua field
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestRegistrasi'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                  username: "jungkook",
                  email: "jungkook@gmail.com",
                  password: "jung123",
                  fullname: "jungkook btw",
                  photo: jungkook.jpg
                }
              userData2:
                description: "Example data  user 2"
                value: {
                  username: "eunwoo",
                  email: "eunwoo@gmail.com",
                  password: "eun123",
                  fullname: "cha eun woo",
                  photo: eunwoo.jpg
                }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success to insert data",
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                  }
                responseData2:
                  description: response success 2
                  value: {
                    message: "success to insert data",
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "all input data must be filled",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    message: "all input data must be filled",
                  }
  /users/{iduser}:
    get:
      tags:
        - Users
      summary: for get User By Id
      description: Bisa diaplikasikan ketika user ingin melihat profilnya
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetUserSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {        
                    message: "success",
                    data: {
                      "id": 1,
                      "username": "antoniobanderas",
                      "email": "antoniobanderas@gmail.com",
                      "alamat": "Jln. Baru Bangun No.7, Jakarta - Indonesia",
                      "notelp": "081223455432",
                      "created_at": "2022-07-22T05:56:50.248Z",
                      "image_url": "server/antonio.jpg"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "Bad Request",
                  }
                responseData2:
                  description: response success 2
                  value: {
                    message: "Bad Request",
                  }
    put:
      tags:
        - Users
      summary: for put User By Id
      description: Bisa diaplikasikan ketika user ingin update profilnya & semua field tidak boleh kosong
      security:
        - JWTAuth: []     
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestUpdate'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                  username: "antoniobanderas",
                  email: "antoniobanderas@gmail.com",
                  password: "An43ddz",
                  alamat: "Jln. Baru Bangun No.7, Jakarta - Indonesia",
                  notelp: "081223455432",
                  file: antonio.jpg
                }
              userData2:
                description: "Example data  user 2"
                value: {
                  username: "AntonyStarr",
                  email: "homelander@gmail.com",
                  password: "Homelander666",
                  alamat: "Jln. Lama No.5, Jakarta - Indonesia",
                  notelp: "081278901234",
                  file: starr.jpg
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success to insert data",
                  }
                responseData2:
                  description: response success 2
                  value: {
                    message: "success to insert data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "failed to update data",
                  }
                responseData2:
                  description: response success 2
                  value: {
                    message: "failed to update data",
                  }
    delete:
      tags:
        - Users
      summary: for delete User By Id
      description: Bisa diaplikasikan ketika user ingin melihat profilnya
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success to delete",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                  }
                responseData2:
                  description: response failed 2
                  value: {
                    message: "Bad Request",
                  }
  /News:
    get:
      tags:
        - News
      description: Get All News
      responses:
        '200':
          description: Success Response get all News
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseAllNewsuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success",
                    data: [{
                      id: 1,
                      content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                      created_at: "2022-07-26T18:35:01.231Z",
                      "image_url": "image/im.jpg",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      }
                    }]
                  }
        '500':
          description: Cannot get all News
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    "message" : "failed to get all data",
                  }
    post:
      tags:
        - News
      description: Add new News
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestNews'
                examples:
                  newsData1:
                    description: "Example news input"
                    value: {
                        content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success to insert news",
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "all input data must be filled",
                  }
  /News/{id}:
    get:
      tags:
        - News
      description: Get news by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
            example: 1
          description: id news
      responses:
        '200':
          description: Success Response get a news
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseNewsuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success",
                    data: {
                      id: 1,
                        content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                  }
    put:
      tags:
        - News
      description: Update News by id
      security:
        - JWTAuth: []     
      parameters:
        - in: path
          name: id_news
          required: true
          schema:
            type: number
            example: 1
          description: ID News
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestUpdateNews'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                        content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success update data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "Bad Request",
                  }
    delete:
      tags:
        - News
      description: Delete news by id news
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: idnews
          required: true
          schema:
            type: number
            example: 1
          description: id_news
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success delete data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                  }
  /News/users:
    get:
      tags:
        - News
      description: Get News by id from token
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success Response get a news
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseNewsuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success",
                    data: {
                      id: 1,
                      content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                      created_at: "2022-07-26T18:35:01.231Z",
                      image_url": "image/im.jpg",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                  }
  /Comment:
    get:
      tags:
        - Comment
      description: Get All Comment
      responses:
        '200':
          description: Success Response get all Comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseCommentSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success",
                    data: [{
                      id: 1,
                      content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                      created_at: "2022-07-26T18:35:01.231Z",
                      "image_url": "image/im.jpg",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      }
                    }]
                  }
        '500':
          description: Cannot get all Comment
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    "message" : "failed to get all data",
                  }
    post:
      tags:
        - Comment
      description: Add new Comment
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestComment'
                examples:
                  newsData1:
                    description: "Example Comment"
                    value: {
                        content: "Kepantai seru...",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success to insert news",
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "all input data must be filled",
                  }
    delete:
      tags:
        - Comment
      description: Delete Comment
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestComment'
                examples:
                  newsData1:
                    description: "Example Comment"
                    value: {
                        content: "Kepantai seru...",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success to insert news",
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "all input data must be filled",
                  }
  /Comment/{id}:
    get:
      tags:
      - Comment
      description: Get comment by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
            example: 1
          description: id comment
      responses:
        '200':
          description: Success Response get a comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseCommentSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success",
                    data: {
                      id: 1,
                        content: "Pantai Keren nih Guys",
                        created_at: "2022-07-24T18:35:01.231Z",
                      user: {
                        id_user: 2,
                        user_name: "AntonyStarr"
                      },
                      news: {
                        id_news: 2
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                  }
    delete:
      tags:
        - Comment
      description: Delete by id comment
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id_comment
          required: true
          schema:
            type: number
            example: 1
          description: id_comment
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success delete data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                  }
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  schemas:
    requestLogin:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1

    responseLoginSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    requestRegistrasi:
      type: object
      properties:
        "username":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "fullname":
          type: string
          minLength: 1
        "file":
          type: string
          minLength: 1
          
    responseRegistrasiSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    responseGetUserSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    requestUpdate:
      type: object
      properties:
        "username":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "fullname":
          type: string
          minLength: 1
        "file":
          type: string
          minLength: 1

    requestNews:
      type: object
      properties:
        "content":
          type: string
          minLength: 1
        "file_images":
          type: string
          minLength: 1
        "file_attachment":
          type: string
          minLength: 1     
        "user_id":
          type: number
          minLength: 1

    responseAllNewsuccess:
      type: object
      properties: {
        "message": {
          type: string
          },
          "data":{
            type: object
          }
      }

    responseNewsuccess:
      type: object
      properties: {
      
        "message": {
          type: string
          },
          "data":{
            type: object
            }
      }

    requestUpdateNews:
      type: object
      properties:
        "content":
          type: string
          minLength: 1
        "file_images":
          type: string
          minLength: 1
        "file_attachment":
          type: string
          minLength: 1     
        "user_id":
          type: number
          minLength: 1
        "sold":
          type: number

    requestComment:
      type: object
      properties:
        "content":
          type: number
          minLength: 1
        "user_id":
          type: number
          minLength: 1
        "news_id":
          type: number
          minLength: 1

    responseCommentSuccess:
      type: object
      properties: {
      
        "message": {
          type: string
          },
          "data":{
            type: object
            }
      }