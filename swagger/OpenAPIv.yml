openapi: 3.0.0
info:
  description: |
    Sosial Media APP with Golang and React JS
  version: "1.0.0"
  title: Sosial Media APP
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: team5@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://app.swaggerhub.com/apis/GolangProject/SosialMedia/1.0.1
  - url: 'https://localhost:8000'
tags:
  - name: user
    description: Operations about user
  - name: news
    description: News management
  - name: comment
    description: Comment Management
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
    get:
      tags:
        - user
      summary: Get All user
      description: Get All User
      operationId: getUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/id:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserByid
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /news:
    post:
      tags:
        - news
      summary: Insert a News to database
      operationId: addNews
      responses:
        '405':
          description: Invalid input
      security:
        - news_auth:
            - 'write:news'
            - 'read:news'
      requestBody:
        $ref: '#/components/requestBodies/News'
    get:
      tags:
        - news
      summary: Get All news
      operationId: getNews
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
      security:
      - news_auth:
          - 'write:news'
          - 'read:news'
      requestBody:
        $ref: '#/components/requestBodies/News'
  '/news/{newsId}':
    get:
      tags:
        - news
      summary: Find news by ID
      description: Returns a single news
      operationId: getNewsById
      parameters:
        - name: newsId
          in: path
          description: ID of news to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
            application/xml:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Invalid ID supplied
        '404':
          description: News not found
      security:
        - api_key: []
    put:
      tags:
        - news
      summary: Updates a news in the store with form data
      operationId: updateNewsWithForm
      parameters:
        - name: newsId
          in: path
          description: ID of news that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - news_auth:
            - 'write:news'
            - 'read:news'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the news
                  type: string
                status:
                  description: Updated status of the news
                  type: string
    delete:
      tags:
        - news
      summary: Deletes a news
      operationId: deleteNews
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: newsId
          in: path
          description: News id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: News not found
      security:
        - newsstore_auth:
            - 'write:news'
            - 'read:news'       
  /comment:
    post:
      tags:
        - comment
      summary: Insert a comment to database
      operationId: addComment
      responses:
        '405':
          description: Invalid input
      security:
        - comment_auth:
            - 'write:comment'
            - 'read:comment'
      requestBody:
        $ref: '#/components/requestBodies/Comment'
    get:
      tags:
        - comment
      summary: Get All comment
      operationId: getCommeent
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
      security:
      - news_auth:
          - 'write:comment'
          - 'read:comment'
      requestBody:
        $ref: '#/components/requestBodies/Comment'
  '/comment/{id}':
    get:
      tags:
        - comment
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
        - name: commentId
          in: path
          description: ID of comment to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
            application/xml:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Invalid ID supplied
        '404':
          description: News not found
      security:
        - api_key: []
    put:
      tags:
        - comment
      summary: Updates a comment in the store with form data
      operationId: updateCommentWithForm
      parameters:
        - name: commentId
          in: path
          description: ID of comment that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - comment_auth:
            - 'write:comment'
            - 'read:comment'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the comment
                  type: string
                status:
                  description: Updated status of the comment
                  type: string
    delete:
      tags:
        - comment
      summary: Deletes a comment
      operationId: deleteComment
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: commentId
          in: path
          description: Comment id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Comment not found
      security:
        - newsstore_auth:
            - 'write:comment'
            - 'read:comment'

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
      xml:
        name: Comment
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        fullName:
          type: string
        email:
          type: string
        password:
          type: string
        photo:
          type: string
          description: Photo Profile Users
      xml:
        name: User
    News:
      type: object
      required:
        - content
      properties:
        id:
          type: integer
          format: int64
        Comment:
          $ref: '#/components/schemas/Comment'
        name:
          type: string
          example: doggie
        images:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        fileAttachment:
            type: array
            xml:
              name: file
              wrapped: true
            items:
              type: string
      xml:
        name: news
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    News:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/News'
        application/xml:
          schema:
            $ref: '#/components/schemas/News'
      description: News object that needs to be added to the store
      required: true
    Comment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
        application/xml:
          schema:
            $ref: '#/components/schemas/Comment'
      description: Comment object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    news_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://newsstore.swagger.io/oauth/dialog'
          scopes:
            'write:news': modify news in your account
            'read:news': read your news
    api_key:
      type: apiKey
      name: api_key
      in: header